# Суммирование HTTP статус-кодов
# Вашей задачей является написание кода, который будет выполнять сетевые запросы к
# указанному диапазону веб-страниц и суммировать HTTP статус-коды всех полученных
# ответов.
# # От
# https://parsinger.ru/3.3/2/1.html
# # До
# https://parsinger.ru/3.3/2/200.html
# Примерно половина ссылок в этом диапазоне возвращает HTTP статус-код 200 (OK).
# Оставшаяся половина возвращает HTTP статус-код 404 (Not Found).
# Задание:
# Сделайте HTTP запрос к каждой странице в указанном диапазоне.
# Получите HTTP статус-код каждой страницы.
# Суммируйте все полученные статус-коды.
# Ожидаемый результат:
# В качестве результата вы должны получить общую сумму всех HTTP статус-кодов,
# полученных от всех страниц в указанном диапазоне.
# Примечание:
# Учтите, что задача предполагает обработку большого числа HTTP запросов.
# Обдумайте, как можно оптимизировать ваш код для минимизации времени выполнения.

import requests
import time

# start_time = time.time()  # замеряю текущее(начальное) время, для оценки скорости выполнения
# # Выполните запрос здесь -- без сессии
# result = 0
# for i in range (1,201):
#     URL = f'https://parsinger.ru/3.3/2/{i}.html'
#     response = requests.get(URL)
#     result += response.status_code
# print(result)
# end_time = time.time()  # замеряю текущее(конечное) время, для оценки скорости выполнения
# total_time = end_time - start_time  # вычисляю разницу, это есть время выполнения
# print(f"Время выполнения запроса: {total_time:.2f} секунд")

start_time = time.time()  # замеряю текущее(начальное) время, для оценки скорости выполнения
# Выполните запрос здесь -- с сессией
# Создаем сессию для получения более быстрого результата
with requests.Session() as s:
    result = 0
    for i in range (1,201):
        URL = f'https://parsinger.ru/3.3/2/{i}.html'
        s.get(URL)
        response = s.get(URL)
        result += response.status_code
print(result)
# elapsed: Время, затраченное на выполнение запроса.
# print("Время выполнения запроса:", response.elapsed)
end_time = time.time()  # замеряю текущее(конечное) время, для оценки скорости выполнения
total_time = end_time - start_time  # вычисляю разницу, это есть время выполнения
print(f"Время выполнения запроса: {total_time:.2f} секунд")
